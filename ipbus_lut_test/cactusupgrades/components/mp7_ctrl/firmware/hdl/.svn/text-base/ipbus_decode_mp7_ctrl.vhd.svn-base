-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_mp7_ctrl is

  constant IPBUS_SEL_WIDTH: positive := 5; -- Should be enough for now?
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_mp7_ctrl(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically  generated VHDL the Thu Mar 27 12:07:02 2014 
  constant N_SLV_ID: integer := 0;
  constant N_SLV_LOC: integer := 1;
  constant N_SLV_XPOINT: integer := 2;
  constant N_SLV_CSR: integer := 3;
  constant N_SLV_I2C_CLK: integer := 4;
  constant N_SLV_I2C_TOP: integer := 5;
  constant N_SLV_I2C_BOT: integer := 6;
  constant N_SLAVES: integer := 7;
-- END automatically generated VHDL

    
end ipbus_decode_mp7_ctrl;

package body ipbus_decode_mp7_ctrl is

  function ipbus_sel_mp7_ctrl(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Thu Mar 27 12:07:02 2014 
    if    std_match(addr, "--------------------------0000--") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ID, IPBUS_SEL_WIDTH)); -- id / base 0x00000000 / mask 0x0000003c
    elsif std_match(addr, "--------------------------00010-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_LOC, IPBUS_SEL_WIDTH)); -- loc / base 0x00000004 / mask 0x0000003e
    elsif std_match(addr, "--------------------------00011-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_XPOINT, IPBUS_SEL_WIDTH)); -- xpoint / base 0x00000006 / mask 0x0000003e
    elsif std_match(addr, "--------------------------00100-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CSR, IPBUS_SEL_WIDTH)); -- csr / base 0x00000008 / mask 0x0000003e
    elsif std_match(addr, "--------------------------010---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_CLK, IPBUS_SEL_WIDTH)); -- i2c_clk / base 0x00000010 / mask 0x00000038
    elsif std_match(addr, "--------------------------011---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_TOP, IPBUS_SEL_WIDTH)); -- i2c_top / base 0x00000018 / mask 0x00000038
    elsif std_match(addr, "--------------------------100---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_I2C_BOT, IPBUS_SEL_WIDTH)); -- i2c_bot / base 0x00000020 / mask 0x00000038
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_mp7_ctrl;

end ipbus_decode_mp7_ctrl;

